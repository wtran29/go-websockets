<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" 
    integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" 
    crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.css" 
    integrity="sha512-7DgarsuahzxiOonlZeYgjXuPFVEDIylPzzlmANJdccCIO0H7ofXKbAKf0FWCkh8NkCFswe3Hpj6HegSTYH6SJQ==" 
    crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.css" 
    integrity="sha512-UrjLcAek5jbj1vwGbXkviPHtgSNVNQCedX7cBIMDdSI2iZtUcZcoTh2Sqc8R9mVcijOjFUi1IlxhfrE1uWaIog==" 
    crossorigin="anonymous" referrerpolicy="no-referrer" />
    
    <style>
        .chatbox {
            outline: 0.5px solid silver;
            min-height: 180px;
            padding: 0.5em;
            border-radius: 3px;
        }
    </style>
    <title>Home</title>
</head>
<body>
    <div class="container">
        <div class="row">
            <div class="col">
                <h1 class="mt-3">Toxic Chatroom</h1>
                <hr>
            </div>
        </div>
        <div class="row">
            <div class="col-md-8">
                <h3 class="mt-2 mb-2">Chat</h3>
                
                <div class="form-group">
                    <div class="col-10">
                        <label for="username">Username:</label>
                        <div class="input-group">
                            <input type="text" name="username" id="username" class="form-control" autocomplete="off">
                            <div id="status" class="input-group-text"></div>
                        </div>
                    </div>
                </div>
                <br>
                <div class="form-group">
                    <div class="col-10">
                        <label for="message">Message:</label>
                        <textarea type="text" name="message" id="message" class="form-control" rows=2 autocomplete="off"></textarea>
                    
                    </div>
                </div>
                <br>
                <a href="javascript:void(0);" class="btn btn-outline-secondary" id="sendBtn">Send Message</a>
                <div class="col-10">
                    <input type="hidden" name="action" id="action">
                    
                    <hr>
                    <div id="output" class="chatbox"></div>
                </div>
            </div>

        
            <div class="col-md-4">
                <h3 class="mt-2 mb-2">Who's Online</h3>
                <ul id="online_users">

                </ul>
            </div>
        </div>
    </div>
</body>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" 
integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" 
crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.js" 
integrity="sha512-NHRCwRf2LnVSlLDejCA9oS3fG3/FLSQIPCjAWl3M7tVi5wszwr6FxkjotWnQDXLE+aLKcxRrzFDNEgXj9nvkPw==" 
crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="/static/reconnecting-websocket.min.js"></script>
<script>
    let socket = null;
    let output = document.getElementById("output");
    let userField = document.getElementById("username");
    let messageField = document.getElementById("message");

    window.onbeforeunload = function() {
        console.log("Leaving");
        let jsonData = {};
        jsonData["action"] = "left";
        socket.send(JSON.stringify(jsonData));
    }

    document.addEventListener("DOMContentLoaded", function(){
        // socket = new WebSocket("ws://"+location.host+"/ws");
        socket = new ReconnectingWebSocket("ws://"+location.host+"/ws", null, {debug: true, reconnectInterval: 3000});

        const offline = `<span class="badge bg-danger">Not Connected</span>`
        const online = `<span class="badge bg-success">Connected</span>`
        let statusField = document.getElementById("status");

        socket.onopen = () => {
            console.log("Successfully connected");
            statusField.innerHTML = online;
        }
        socket.onclose = () => {
            console.log("Connection closed");
            statusField.innerHTML = offline;
        }

        socket.onerror = error => {
            console.log("there was an error");
            statusField.innerHTML = offline;
        }

        socket.onmessage = msg => {
            // console.log(msg);
            // let j = JSON.parse(msg.data);
            // console.log(j);

            let data = JSON.parse(msg.data);
            console.log("Action is", data.action);

            switch (data.action) {
                case "list_users":
                    let ul = document.getElementById("online_users");
                    while (ul.firstChild) ul.removeChild(ul.firstChild);

                    if (data.connected_users.length > 0){
                        data.connected_users.forEach(function(item){
                            let li = document.createElement("li");
                            li.appendChild(document.createTextNode(item));
                            ul.appendChild(li);
                        })
                    }
                    break;

                    case "broadcast":
                        output.innerHTML = output.innerHTML + data.message + "<br>"
            }
        }



        userField.addEventListener("change", function() {
            let jsonData = {};
            jsonData["action"] = "username";
            jsonData["username"] = this.value;
            socket.send(JSON.stringify(jsonData));
        })

        messageField.addEventListener("keydown", (event)=>{
            if (event.code == "Enter") {
                if (!socket) {
                    console.log("no connection");
                    return false;
                }
                if ((userField.value === "") || (messageField.value === "")){
                    errorMessage("Username and message must not be empty");
                    return false;
                } else {
                    sendMessage();
                }
                event.preventDefault();
                event.stopPropagation();
                
            }   
        })

        document.getElementById("sendBtn").addEventListener("click", ()=> {
            if ((userField.value === "") || (messageField.value === "")){
                errorMessage("Username and message must not be empty");
                return false;
            } else {
                sendMessage();
            }
        })
    })

    function sendMessage(){
        let jsonData = {};
        jsonData["action"] = "broadcast";
        jsonData["username"] = userField.value;
        jsonData["message"] = messageField.value;
        socket.send(JSON.stringify(jsonData))
        messageField.value = "";
    }

    function errorMessage(msg) {
        notie.alert({
            type: 'error',
            text: msg,
            stay: false, // optional, default = false
            time: 3, // optional, default = 3, minimum = 1,
            position: 'top' // optional, default = 'top', enum: ['top', 'bottom']
        })
    }
</script>
</html>